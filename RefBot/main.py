import asyncio
import logging

from aiogram import Bot, Dispatcher, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from aiogram.filters import Command, BaseFilter, StateFilter



from app.db import delete_withdrawal, get_user, create_db, init_bonus_settings, update_user_balance, create_users_table, add_withdrawal, get_user_balance, get_withdrawals, get_saved_payeer_id, save_payeer_id, create_payeer_wallets_table
from app.referals import (
    handle_start_command, handle_sub_channel, handle_get_bonus,
    handle_profile, handle_referral_program
)
from app.keyboards import (
    main_menu_keyboard, 
    admin_menu_keyboard, create_delete_user_keyboard)

class WithdrawalStates(StatesGroup):
    payeer_id = State()
    amount = State()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7842687451:AAHkZt8GlRbtyXMHfo7PC6UbQqXCTELjrz0'
CHANNEL_ID = -1002350600965
ADMIN_ID = 6466769330

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)  
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
class WithdrawalStates(StatesGroup):
    payeer_id = State()
    amount = State()

# –§–∏–ª—å—Ç—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞
class AdminFilter(BaseFilter):
    async def __call__(self, message: Message, bot: Bot) -> bool:
        return message.from_user.id == ADMIN_ID
    
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞
class MyTextFilter(BaseFilter):
    def __init__(self, text: str):
        self.text = text

    async def __call__(self, message: Message) -> bool:
        return message.text.lower() == self.text.lower()

class AdminState(StatesGroup):
    enter_amount = State()
    enter_user_id = State()
    enter_withdraw_data = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def start_command_handler(message: types.Message, bot: Bot):
    await handle_start_command(message, bot)  # –ü–µ—Ä–µ–¥–∞–µ–º bot –≤ handle_start_command
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
@router.callback_query(lambda callback: callback.data == "sub_channel")
async def sub_channel_handler(callback: types.CallbackQuery, bot: Bot):
    await handle_sub_channel(callback, bot, channel_id=CHANNEL_ID)  # –ü–µ—Ä–µ–¥–∞–µ–º bot –≤ handle_sub_channel

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@router.message(MyTextFilter("–ø—Ä–æ—Ñ–∏–ª—å"))
async def profile_handler(message: types.Message):
    await handle_profile(message)

@router.message(MyTextFilter("–ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å"))
async def get_bonus_handler(message: types.Message):
    await handle_get_bonus(message)

@router.message(MyTextFilter("—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"))
async def referral_handler(message: types.Message):
    await handle_referral_program(message)

@router.message(MyTextFilter("–æ –ø—Ä–æ–µ–∫—Ç–µ"))
async def about_handler(message: types.Message):
    await message.answer("""
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–π —Å –Ω–∞–º–∏! üí∞

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –Ω–∞—à–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ, –≥–¥–µ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏, –ø—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π!

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–Ω–∞–∫–æ–º—ã–º–∏.

–ü–æ–ª—É—á–∞–π—Ç–µ 1 —Ä—É–±–ª—å –∑–∞ –∫–∞–∂–¥–æ–≥–æ: –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –í–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –ø—Ä–æ—è–≤–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª/–ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞), –í—ã –ø–æ–ª—É—á–∏—Ç–µ 1 —Ä—É–±–ª—å –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.

–í—ã–≤–æ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏: –ö–∞–∫ —Ç–æ–ª—å–∫–æ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞, –í—ã —Å–º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.

–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?

–ü—Ä–æ—Å—Ç–æ—Ç–∞: –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∏–∫–∞–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤.

–ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏, –ø—Ä–æ—Å—Ç–æ –¥–µ–ª—è—Å—å —Å—Å—ã–ª–∫–æ–π.

–ü–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –í–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üí∏
""")

def validate_withdrawal_amount(amount: float) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –ø–æ—Ä–æ–≥—É."""
    return amount >= 10


@router.message(lambda message: message.text == "–í–´–í–û–î –°–†–ï–î–°–¢–í", StateFilter(None))
async def withdraw_cmd(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.clear()
    
    user_id = message.from_user.id
    user = await get_user(user_id)
    
    if user:
        payeer_id = await get_saved_payeer_id(user_id)
        
        if payeer_id:
            await state.set_state(WithdrawalStates.amount)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:")
        else:
            await state.set_state(WithdrawalStates.payeer_id)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ PAYEER, –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º 5 —Ä–∞–∑ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ P –∞–Ω–≥–ª–∏–π—Å–∫—É—é:", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()

@router.message(WithdrawalStates.payeer_id)
async def get_payeer_id(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.clear()
    
    await save_payeer_id(message.from_user.id, message.text)
    await state.set_state(WithdrawalStates.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:")

@router.message(WithdrawalStates.amount)
async def get_amount(message: types.Message, state: FSMContext):
    if await state.get_state() != WithdrawalStates.amount:
        await state.clear()
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_keyboard)
        return

    if not message.text.replace('.', '', 1).isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_menu_keyboard)
        await state.clear()
        return

    try:
        amount = float(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_menu_keyboard)
        await state.clear()
        return

    user_id = message.from_user.id
    user = await get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    if user['referral_level1'] < 10:
        await message.answer("–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.", reply_markup=main_menu_keyboard)
        await state.clear()
        return

    if amount < 10:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10 —Ä—É–±–ª–µ–π.", reply_markup=main_menu_keyboard)
        await state.clear()
        return

    payeer_id = await get_saved_payeer_id(user_id)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = await get_user_balance(user_id)
        if balance is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard)
            await state.clear()
            return

        if balance < amount:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.", reply_markup=main_menu_keyboard)
            await state.clear()
            return

        # –í—ã—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
        await update_user_balance(user_id, -amount)
        await add_withdrawal(user_id, payeer_id, amount)
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.", reply_markup=main_menu_keyboard)
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard)
        await state.clear()




@router.message(Command("admin"))
async def admin_command_handler(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.clear()
    
    if str(message.from_user.id) == str(ADMIN_ID):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu_keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.callback_query(lambda callback: callback.data == "back_to_admin")
async def back_to_admin_handler(callback: types.CallbackQuery):
    if str(callback.from_user.id) == str(ADMIN_ID):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
        await callback.message.edit_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_menu_keyboard)
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é.")

@router.callback_query(lambda callback: callback.data == "view_withdrawals", AdminFilter())
async def view_withdrawals_handler(callback: types.CallbackQuery):
    try:
        withdrawals = await get_withdrawals()

        if not withdrawals:
            await callback.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.")
            return

        text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:\n\n"
        user_ids = []
        for i, (user_id, payeer_id, amount) in enumerate(withdrawals):
            text += f"{i+1}. User ID: {user_id}, –ö–æ—à–µ–ª–µ–∫: {payeer_id}, –°—É–º–º–∞: {amount}\n"
            user_ids.append(user_id)

        keyboard = create_delete_user_keyboard(user_ids)

        await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ view_withdrawals_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(lambda callback: callback.data.startswith("delete_"))
async def delete_user_callback_handler(callback: types.CallbackQuery):
    try:
        user_id = int(callback.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data

        await delete_withdrawal(user_id)  # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —É–¥–∞–ª–µ–Ω–∞.")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await view_withdrawals_handler(callback)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ delete_user_callback_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")



async def main():
    # await on_startup(bot)
    await create_db()
    await init_bonus_settings()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–∞
    await create_users_table()
    await create_payeer_wallets_table()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
